-- MySQL Script generated by MySQL Workbench
-- Wed Nov 13 20:31:43 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema estudiantes
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema estudiantes
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `estudiantes` DEFAULT CHARACTER SET utf8 ;
USE `estudiantes` ;

-- -----------------------------------------------------
-- Table `estudiantes`.`estudiantes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `estudiantes`.`estudiantes` (
  `id_estudiante` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `edad` INT NOT NULL,
  PRIMARY KEY (`id_estudiante`),
  UNIQUE INDEX `idestudiantes_UNIQUE` (`id_estudiante` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `estudiantes`.`cursos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `estudiantes`.`cursos` (
  `id_curso` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `duracion` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_curso`),
  UNIQUE INDEX `idcursos_UNIQUE` (`id_curso` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `estudiantes`.`inscripciones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `estudiantes`.`inscripciones` (
  `estudiantes_id_estudiante` INT NOT NULL,
  `cursos_id_curso` INT NOT NULL,
  PRIMARY KEY (`estudiantes_id_estudiante`, `cursos_id_curso`),
  INDEX `fk_inscripciones_cursos1_idx` (`cursos_id_curso` ASC) VISIBLE,
  CONSTRAINT `fk_inscripciones_estudiantes`
    FOREIGN KEY (`estudiantes_id_estudiante`)
    REFERENCES `estudiantes`.`estudiantes` (`id_estudiante`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_inscripciones_cursos1`
    FOREIGN KEY (`cursos_id_curso`)
    REFERENCES `estudiantes`.`cursos` (`id_curso`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- insertar estudiantes
INSERT INTO estudiantes.estudiantes (nombre, edad) 
VALUES
  ('Juan Pérez', 20),
  ('Ana García', 22),
  ('Carlos López', 21),
  ('María Rodríguez', 23),
  ('Luis Fernández', 19);
  
  -- crear tabla libros
  CREATE TABLE IF NOT EXISTS `libros` (
  `id_libro` INT NOT NULL AUTO_INCREMENT,
  `titulo` VARCHAR(255) NOT NULL,
  `autor` VARCHAR(255) NOT NULL,
  `anio_publicacion` INT NOT NULL,
  PRIMARY KEY (`id_libro`)
);
-- insertar libros
INSERT INTO libros (titulo, autor, anio_publicacion)
VALUES
  ('Cien años de soledad', 'Gabriel García Márquez', '1967'),
  ('1984', 'George Orwell', '1949'),
  ('Don Quijote de la Mancha', 'Miguel de Cervantes', '1605'),
  ('La sombra del viento', 'Carlos Ruiz Zafón', '2001');

-- insertar cursos en la tabla cursos
INSERT INTO estudiantes.cursos (nombre, duracion)
VALUES
  ('Matemáticas', '6 meses'),
  ('Historia', '4 meses'),
  ('Física', '5 meses');
  
  -- asociar estudiantes a cursos
  INSERT INTO estudiantes.inscripciones (estudiantes_id_estudiante, cursos_id_curso)
VALUES
  (1, 1),  -- Juan Pérez se inscribe en Matemáticas
  (1, 2),  -- Juan Pérez se inscribe en Historia
  (2, 1),  -- Ana García se inscribe en Matemáticas
  (2, 3),  -- Ana García se inscribe en Física
  (3, 2),  -- Carlos López se inscribe en Historia
  (3, 3),  -- Carlos López se inscribe en Física
  (4, 1),  -- María Rodríguez se inscribe en Matemáticas
  (4, 2);  -- María Rodríguez se inscribe en Historia
  
  -- proyectar a los estudiantes y sus respectivos cursos
  SELECT e.id_estudiante, e.nombre AS estudiante, c.id_curso, c.nombre AS curso FROM estudiantes.estudiantes e JOIN estudiantes.inscripciones i ON e.id_estudiante = i.estudiantes_id_estudiante JOIN estudiantes.cursos c ON i.cursos_id_curso = c.id_curso;
  
  -- Proyecta todos los estudiantes que están inscritos en un curso específico, utilizando el nombre del curso como criterio de búsqueda
  SELECT e.id_estudiante, e.nombre AS estudiante, c.nombre AS curso FROM estudiantes.estudiantes e JOIN estudiantes.inscripciones i ON e.id_estudiante = i.estudiantes_id_estudiante JOIN estudiantes.cursos c ON i.cursos_id_curso = c.id_curso WHERE c.nombre = 'Matemáticas';  
  
  --  proyectar todos los cursos en los que está inscrito un estudiante específico, utilizando su nombre como criterio de búsqueda
  SELECT e.id_estudiante, e.nombre AS estudiante, c.id_curso, c.nombre AS curso FROM estudiantes.estudiantes e JOIN estudiantes.inscripciones i ON e.id_estudiante = i.estudiantes_id_estudiante JOIN estudiantes.cursos c ON i.cursos_id_curso = c.id_curso WHERE e.nombre = 'Juan Pérez'; 
  
  --  contar el número de estudiantes inscritos en cada curso y mostrar el nombre del curso junto con el número de estudiantes inscritos
  SELECT c.nombre AS curso, COUNT(i.estudiantes_id_estudiante) AS num_estudiantes FROM estudiantes.cursos c LEFT JOIN estudiantes.inscripciones i ON c.id_curso = i.cursos_id_curso GROUP BY c.id_curso;
  
  -- encontrar estudiantes sin curso
SELECT * FROM estudiantes.inscripciones;
-- estudiante 5( luis fernandez) no tiene curso














